// Generated by CoffeeScript 1.3.3

  var Board, Monopoly, Player, Square, game;

  Monopoly = (function() {

    Monopoly.prototype.game_finished = false;

    Monopoly.prototype.output = '';

    Monopoly.prototype.player_position = 0;

    function Monopoly() {
      this.board = new Board();
      this.player = new Player(500);
    }

    Monopoly.prototype.turn = function() {
      var a, b, walking_distance, _ref;
      if (this.game_finished) {
        return this.output;
      }
      this.output += '<br/>' + 'Rolling dices';
      _ref = this.roll_dices(2), a = _ref[0], b = _ref[1];
      walking_distance = a + b;
      this.output += '<br/>' + 'You got a ' + a + ' and a ' + b;
      this.walk(walking_distance);
      this.check_square_action(walking_distance);
      if (!this.game_finished) {
        this.output += '<br/>' + 'Your current balance is ' + this.player.cash;
      }
      this.output += '<hr />';
      $('#messages').html(this.output);
      $('#cash').html('Cash: ' + this.player.cash);
      $('.board tr td').each(function() {
        return $(this).removeClass('player_square');
      });
      $('#square_' + this.player_position).addClass('player_square');
      return this.output = '';
    };

    Monopoly.prototype.roll_dice = function() {
      return Math.floor(Math.random() * 6) + 1;
    };

    Monopoly.prototype.roll_dices = function(num) {
      return [this.roll_dice(), this.roll_dice()];
    };

    Monopoly.prototype.walk = function(distance) {
      if ((this.player_position + distance + 1) > this.board.square_set.length) {
        this.player_position = (this.player_position + distance) - (this.board.square_set.length - 1);
        this.output += '<br/>' + 'Congratulation! You just passed through GO! Here`s your $200!';
        return this.player.cash += 200;
      } else {
        return this.player_position += distance;
      }
    };

    Monopoly.prototype.check_square_action = function(roll) {
      var square_type;
      this.output += '<br/>' + this.player_position;
      square_type = this.board.square_set[this.player_position].type;
      switch (square_type) {
        case 'rent':
          this.output += '<br/>' + "That's too bad! You have to pay " + 30 * roll + " for the rent.";
          this.player.cash -= 30 * roll;
          break;
        case 'utility':
          this.output += '<br/>' + "That's too bad! You have to pay " + 20 * roll + " for the utility.";
          this.player.cash -= 20 * roll;
      }
      if (this.player.cash <= 0) {
        this.output += '<br/>' + 'Sorry, you just ran out of money. Better luck next time.';
        return this.game_finished = true;
      }
    };

    Monopoly.prototype.run = function() {
      this.output += '<h1>Starting the game!</h1>';
      return this.turn();
    };

    return Monopoly;

  })();

  Player = (function() {

    function Player(cash) {
      this.cash = cash;
    }

    return Player;

  })();

  Board = (function() {

    Board.square_set = null;

    function Board() {
      this.square_set = [new Square('go'), new Square('rent'), new Square('utility'), new Square('utility'), new Square('rent'), new Square('utility'), new Square('rent'), new Square('rent'), new Square('rent'), new Square('utility'), new Square('utility'), new Square('rent'), new Square('utility'), new Square('rent'), new Square('rent'), new Square('utility')];
    }

    return Board;

  })();

  Square = (function() {

    function Square(type) {
      this.type = type;
    }

    return Square;

  })();

  game = {};

  $(document).ready(function() {
    game = new Monopoly();
    $('#new_game').click(function() {
      console.log('New Game');
      game = new Monopoly();
      $('#messages').html('');
      $('#cash').html('Cash: ' + game.player.cash);
      $('.board tr td').each(function() {
        return $(this).removeClass('player_square');
      });
      return $('#square_0').addClass('player_square');
    });
    return $('#roll_dice').click(function() {
      console.log('Roll Dice');
      game.turn();
      return console.log(game.output);
    });
  });

